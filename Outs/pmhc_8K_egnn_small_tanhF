
Modules based on Lua: Version 8.7.30  2023-07-21 17:13 -05:00
    by Robert McLay mclay@tacc.utexas.edu

module [options] sub-command [args ...]

Help sub-commands:
------------------
  help                              prints this message
  help                module [...]  print help message from module(s)

Loading/Unloading sub-commands:
-------------------------------
  load | add          module [...]  load module(s)
  try-load | try-add  module [...]  Add module(s), do not complain if not
                                    found
  del | unload        module [...]  Remove module(s), do not complain if not
                                    found
  swap | sw | switch  m1 m2         unload m1 and load m2
  purge                             unload all modules
  refresh                           reload aliases from current list of
                                    modules.
  update                            reload all currently loaded modules.

Listing / Searching sub-commands:
---------------------------------
  list                              List loaded modules
  list                s1 s2 ...     List loaded modules that match the
                                    pattern
  avail | av                        List available modules
  avail | av          string        List available modules that contain
                                    "string".
  category | cat                    List all categories
  category | cat      s1 s2 ...     List all categories that match the
                                    pattern and display their modules
  overview | ov                     List all available modules by short
                                    names with number of versions
  overview | ov       string        List available modules by short names
                                    with number of versions that contain
                                    "string"
  spider                            List all possible modules
  spider              module        List all possible version of that module
                                    file
  spider              string        List all module that contain the
                                    "string".
  spider              name/version  Detailed information about that version
                                    of the module.
  whatis              module        Print whatis information about module
  keyword | key       string        Search all name and whatis that contain
                                    "string".

Searching with Lmod:
--------------------
  All searching (spider, list, avail, keyword) support regular expressions:
  

  -r spider           '^p'          Finds all the modules that start with
                                    `p' or `P'
  -r spider           mpi           Finds all modules that have "mpi" in
                                    their name.
  -r spider           'mpi$         Finds all modules that end with "mpi" in
                                    their name.

Handling a collection of modules:
--------------------------------
  save | s                          Save the current list of modules to a
                                    user defined "default" collection.
  save | s            name          Save the current list of modules to
                                    "name" collection.
  reset                             The same as "restore system"
  restore | r                       Restore modules from the user's
                                    "default" or system default.
  restore | r         name          Restore modules from "name" collection.
  restore             system        Restore module state to system defaults.
  savelist                          List of saved collections.
  describe | mcc      name          Describe the contents of a module
                                    collection.
  disable             name          Disable (i.e. remove) a collection.

Deprecated commands:
--------------------
  getdefault          [name]        load name collection of modules or
                                    user's "default" if no name given.
                                    ===> Use "restore" instead <====
  setdefault          [name]        Save current list of modules to name if
                                    given, otherwise save as the default
                                    list for you the user.
                                    ===> Use "save" instead. <====

Miscellaneous sub-commands:
---------------------------
  is-loaded           modulefile    return a true status if module is loaded
  is-avail            modulefile    return a true status if module can be
                                    loaded
  show                modulefile    show the commands in the module file.
  use [-a]            path          Prepend or Append path to MODULEPATH.
  unuse               path          remove path from MODULEPATH.
  tablelist                         output list of active modules as a lua
                                    table.

Important Environment Variables:
--------------------------------
  LMOD_COLORIZE                     If defined to be "YES" then Lmod prints
                                    properties and warning in color.

    --------------------------------------------------------------------------

Lmod Web Sites

  Documentation:    https://lmod.readthedocs.org
  GitHub:           https://github.com/TACC/Lmod
  SourceForge:      https://lmod.sf.net
  TACC Homepage:    https://www.tacc.utexas.edu/research-development/tacc-projects/lmod

  To report a bug please read https://lmod.readthedocs.io/en/latest/075_bug_reporting.html
    --------------------------------------------------------------------------


Lmod has detected the following error: These module(s) or extension(s) exist
but cannot be loaded as requested: "Anaconda3/2021.05"
   Try: "module spider Anaconda3/2021.05" to see how to load the module(s).



tensor([47.8005,  5.7663,  1.9524])
10 torch.Size([100])
Time: 207.76929187774658
20 torch.Size([100])
Time: 204.78986644744873
30 torch.Size([100])
Time: 205.43721961975098
40 torch.Size([100])
Time: 207.55897879600525
50 torch.Size([100])
Time: 206.454030752182
60 torch.Size([100])
Time: 205.99538135528564
70 torch.Size([100])
Time: 205.35350155830383
80 torch.Size([100])
Time: 207.1282651424408
90 torch.Size([100])
Time: 207.74169778823853
100 torch.Size([100])
Time: 204.21534490585327
110 torch.Size([100])
Time: 204.97796154022217
120 torch.Size([100])
Time: 203.846253156662
130 torch.Size([100])
Time: 201.69970798492432
140 torch.Size([100])
Time: 202.20564031600952
150 torch.Size([100])
Time: 203.098703622818
160 torch.Size([100])
Time: 203.8135974407196
170 torch.Size([100])
Time: 203.3501706123352
180 torch.Size([100])
Time: 203.86920714378357
190 torch.Size([100])
Time: 204.43992447853088
200 torch.Size([100])
Time: 205.40891242027283
210 torch.Size([100])
Time: 203.96051120758057
220 torch.Size([100])
Time: 203.47428250312805
230 torch.Size([100])
Time: 202.90077018737793
240 torch.Size([100])
Time: 205.68871998786926
250 torch.Size([100])
Time: 205.54509139060974
260 torch.Size([100])
Time: 205.90702199935913
270 torch.Size([100])
Time: 205.62644600868225
280 torch.Size([100])
Time: 206.02567648887634
290 torch.Size([100])
Time: 206.2650899887085
300 torch.Size([100])
Time: 206.02078437805176
310 torch.Size([100])
Time: 206.57782769203186
320 torch.Size([100])
Time: 205.9570174217224
330 torch.Size([100])
Time: 203.6227629184723
340 torch.Size([100])
Time: 203.8064308166504
350 torch.Size([100])
Time: 205.82589650154114
360 torch.Size([100])
Time: 204.85724234580994
370 torch.Size([100])
Time: 206.1587471961975
380 torch.Size([100])
Time: 205.9078025817871
390 torch.Size([100])
Time: 204.86442732810974
400 torch.Size([100])
Time: 205.95305037498474
410 torch.Size([100])
Time: 205.91794991493225
420 torch.Size([100])
Time: 204.96393489837646
430 torch.Size([100])
Time: 205.2647500038147
440 torch.Size([100])
Time: 205.49633741378784
450 torch.Size([100])
Time: 204.78679251670837
tensor([ 0.8343,  0.7694,  0.7153, 19.1010,  0.8655,  0.9954,  0.8420,  0.8493,
         0.9016,  0.6395,  1.2824,  0.9917, 10.7824,  1.1155,  1.0267,  0.9986,
         0.8896,  1.0221,  1.0379, 14.5730, 10.5837,  0.9754,  1.1607,  1.0617,
         1.1993,  1.1781,  1.3472,  1.3293,  1.0833,  1.1993,  1.0874, 10.3047,
        15.6053,  1.2217,  0.9088,  1.1296,  1.1117,  7.1236,  1.0401,  0.8526,
         0.8757,  0.8755,  0.8519,  1.1042,  0.8782,  0.8923,  0.8710,  1.1117,
         0.7510,  0.8208,  1.1148,  1.2274,  1.1965,  0.9450, 18.0257,  1.0206,
         0.9258,  0.9229, 22.8069,  0.9393,  1.0125, 10.7158,  1.1629,  1.0285,
         0.8990,  6.4668,  0.9694,  1.0521,  1.1781,  1.1259,  0.8089,  0.9229,
         0.9736,  0.7001,  0.9313,  0.8004,  0.9075,  0.8744,  0.8953,  0.8102,
         1.2578,  1.0545,  1.3983,  1.2367, 21.6376,  1.2797,  1.0526,  1.2997,
         1.4296,  1.1532,  0.9925,  0.9096,  0.8637,  0.9590,  0.7708,  0.8899,
         0.9242,  1.1667,  0.8827,  1.0660,  0.8887,  1.0057,  1.1418,  1.0820,
         1.1944,  1.0835,  0.9697,  1.1313,  1.1752,  0.9481,  1.0096,  1.0123,
         1.0663,  1.1384,  0.9631,  1.1262,  0.9514,  1.1721,  1.0892,  1.0873,
         1.3412,  1.2605,  0.9257,  1.1506,  1.2801,  1.1547,  1.1607,  0.9961,
         1.1064,  1.1765,  1.4961,  1.3714,  1.3416,  1.2566,  1.4233,  1.4737,
         1.2365,  1.4323,  1.4938,  1.2499,  8.0265,  1.0982,  1.1911,  1.1549,
         1.2081, 16.6231,  1.1396,  0.8266,  1.1319,  1.0019,  1.1492,  1.3271,
         1.1801,  1.4379,  1.1943,  1.1002,  1.0219,  1.1413,  1.1461,  1.1790,
        16.8438,  1.3831,  7.3425,  1.1791,  1.1616,  1.2887,  1.3013,  1.1098,
         1.2555,  1.0951,  1.1389,  1.1089,  1.2608,  1.3703,  1.0214,  0.9193,
         3.2612,  1.0668,  0.9975,  1.0357, 12.3173,  1.2414,  1.2060,  1.1737,
         1.3621,  1.2125,  1.2816,  1.1930,  1.3438,  0.9811,  1.4697,  1.2365,
         1.1790,  1.1095,  1.0044,  1.2773,  1.0243,  1.2672,  1.1222,  1.2347,
         1.2044,  1.3028,  1.0908,  1.0218,  1.2321,  0.9414,  1.1439,  1.1265,
         0.9917,  1.1392,  1.0447,  1.0502,  0.9366,  0.9743, 11.4860,  0.8185,
         1.0459,  0.8642,  1.0251,  0.7894,  1.0850,  1.4684,  1.0569,  1.1781,
         1.1050,  1.1032, 31.5875,  1.0402, 36.7912,  1.0274,  1.1126,  1.0525,
         1.2838,  1.1071,  1.3016,  1.3725,  1.2069,  1.2326,  1.0892,  1.2352,
         1.0836,  0.9531,  1.0672,  1.0749,  0.8541,  1.0397,  1.0208,  0.8827,
         0.8267,  1.0411, 19.3621,  1.0530,  1.1584,  1.1578,  1.2672,  1.1856,
         1.2425,  1.1295,  1.0605,  0.8214,  1.1659,  1.0959,  1.2023,  1.1321,
         1.2944,  1.0814,  0.9253,  1.2149,  1.1093,  1.1736,  1.3421,  1.3874,
         1.3568, 16.7297,  1.4711,  6.4418,  1.3733,  1.1881,  1.4866,  1.3339,
         1.3485,  1.2893,  1.0914,  1.6886,  1.8167,  1.5766,  1.4607,  1.6139,
        13.2934,  1.1355,  1.0800,  1.0469, 15.4326,  1.0040,  1.1473,  0.9638,
         1.2484,  1.1506,  1.2679,  0.9488,  1.0636,  0.9765,  1.0358,  1.0590,
         1.0095,  0.8213,  0.8520,  1.0432,  1.1795,  0.9200,  1.0666,  1.1238,
         1.0610,  1.2503,  0.8462,  1.1121,  8.9909,  0.7737,  1.1522,  0.9716,
         1.0263,  1.0576,  1.0760,  1.2255,  1.1024, 23.7144, 15.0877,  0.9956,
         6.3906,  1.1892,  7.7745, 12.0426,  9.7552,  1.2384,  1.1746,  1.2247,
         1.1169,  1.2768, 12.6432,  1.0916,  1.3526,  1.3090,  1.3281,  1.4466,
         1.3759,  1.4463,  9.3326,  1.2611,  1.3735,  1.1491,  1.0717, 15.0423,
         1.0832,  0.9326,  0.8599,  0.9897,  1.0304,  1.1123,  1.1105,  0.9717,
         0.9962, 16.7442,  0.9709,  1.1242,  1.0138,  0.9526,  0.9989,  1.1910,
         1.2806,  0.9696,  1.4258,  1.3489,  1.1354,  1.2209,  1.4784,  1.1926,
         1.2000,  1.3518,  1.3570,  1.2740,  1.1055,  0.9837,  1.3284,  7.5194,
         1.0797,  0.9144,  0.8402,  7.7452,  1.0300,  1.0700,  1.0263,  1.0268,
        19.9999,  0.8587,  0.9424,  0.9840,  1.1626,  0.9599,  1.0335,  0.8867,
         1.2279,  1.1500,  1.1271,  0.9993,  1.1840,  0.9109,  1.2694,  1.0259,
         1.0265,  0.8387,  1.0424,  7.8959,  1.1298,  1.0549,  1.1553,  0.9877,
         1.0202,  1.0406,  1.2227,  1.0907,  1.0988,  1.2173,  1.2270,  1.1884,
         1.1131,  1.2181,  1.1313,  1.1254,  1.0625,  1.0552,  1.0026,  1.2075,
         1.6605,  1.0998,  1.1448,  0.9653,  0.9927,  1.4783,  1.2550,  1.2103,
         1.1431,  1.2126,  1.1084,  0.9711,  1.2132,  0.8572,  1.1881,  1.2074,
         1.2040,  0.8940], device='cuda:0')
tensor([0.3502, 0.3935, 0.3781, 0.5530, 0.4930, 0.3822, 0.3489, 0.3312, 0.3229,
        0.2627, 0.6001, 0.4300, 0.4693, 0.3773, 0.4403, 0.4572, 0.4960, 0.6334,
        0.3872, 0.4576, 0.5836, 0.3557, 0.3934, 0.4486, 0.4113, 0.5052, 0.4997,
        0.4191, 0.4757, 0.3487, 0.5201, 0.5835, 0.5982, 0.6372, 0.5500, 0.6346,
        0.7042, 0.5472, 0.5489, 0.4281, 0.2526, 0.2892, 0.4266, 0.3626, 0.3215,
        0.2778, 0.4001, 0.3761, 0.3258, 0.3787, 0.2244, 0.4643, 0.4434, 0.4379,
        0.5722, 0.3491, 0.5335, 0.4600, 0.3189, 0.5967, 0.5495, 0.3558, 0.4376,
        0.4179, 0.3193, 0.4481, 0.5217, 0.3876, 0.5938, 0.6316, 0.4153, 0.3799,
        0.3044, 0.2896, 0.2878, 0.2490, 0.3835, 0.3112, 0.3749, 0.3074, 0.3198,
        0.4265, 0.4403, 0.3618, 0.7104, 0.5529, 0.5551, 0.5127, 0.5072, 0.3096,
        0.4690, 0.6508, 0.3975, 0.5128, 0.3566, 0.4535, 0.4977, 0.3538, 0.4079,
        0.4342, 0.3638, 0.4277, 0.7173, 0.4957, 0.3557, 0.2652, 0.4500, 0.5391,
        0.5865, 0.3550, 0.3346, 0.5109, 0.5844, 0.4243, 0.4678, 0.2872, 0.4361,
        0.3938, 0.5229, 0.3217, 0.6592, 0.3729, 0.5380, 0.5772, 0.7974, 0.7335,
        0.4980, 0.4613, 0.2671, 0.4625, 1.0324, 0.5378, 0.8594, 0.5104, 0.7331,
        0.5782, 0.2691, 0.9923, 0.8833, 0.7860, 0.4312, 0.5711, 0.7852, 0.5985,
        0.3571, 0.8994, 0.4794, 0.4026, 0.4194, 0.4729, 0.2906, 0.4364, 0.3093,
        0.2850, 0.5565, 0.5192, 0.4266, 0.4384, 0.2861, 0.4499, 0.3192, 0.4141,
        0.6812, 0.3178, 0.4737, 0.7368, 0.4310, 0.6738, 0.5903, 0.5498, 0.5676,
        0.4924, 0.5089, 0.5049, 0.4833, 0.4969, 0.5380, 0.3158, 0.3081, 0.3649,
        0.7427, 0.3138, 0.5302, 0.5052, 0.8722, 0.7582, 0.2905, 0.7269, 0.7875,
        0.3399, 0.7028, 0.4328, 0.5122, 0.4524, 0.4848, 0.6707, 0.3330, 0.3399,
        0.3751, 0.3856, 0.1674, 0.3869, 0.3685, 0.3071, 0.5238, 0.2797, 0.2548,
        0.3738, 0.5127, 0.2578, 0.4804, 0.4272, 0.2599, 0.4360, 0.2675, 0.3050,
        0.3585, 0.3838, 0.4804, 0.2567, 0.4657, 0.8703, 0.3964, 0.4618, 0.5272,
        0.5187, 0.3303, 0.4073, 0.7433, 0.3798, 0.4241, 0.6234, 0.5625, 0.2535,
        0.7547, 0.6616, 0.5079, 0.6233, 0.4612, 0.5582, 0.4759, 0.4235, 0.4456,
        0.3744, 0.5450, 0.4540, 0.4404, 0.2270, 0.3665, 0.4384, 0.5186, 0.3117,
        0.3790, 0.4671, 0.5581, 0.4080, 0.5534, 0.2489, 0.5175, 0.3698, 0.4418,
        0.4058, 0.6069, 0.5587, 0.2359, 0.2846, 0.2954, 0.3644, 0.5438, 0.6327,
        0.2655, 0.4439, 0.2634, 0.5929, 0.9039, 0.7189, 0.7059, 0.3162, 0.7378,
        0.6852, 0.3711, 0.4590, 0.4144, 0.4687, 0.8970, 0.2307, 0.4007, 1.0442,
        0.5396, 0.3859, 0.4740, 0.6149, 0.3086, 0.3587, 0.3705, 0.3169, 0.4410,
        0.4205, 0.4777, 0.5189, 0.3530, 0.4243, 0.4817, 0.3953, 0.5441, 0.4195,
        0.3861, 0.4066, 0.4275, 0.3593, 0.2384, 0.4865, 0.4198, 0.3123, 0.5602,
        0.5239, 0.3031, 0.3747, 0.4894, 0.3972, 0.5148, 0.2877, 0.3366, 0.3755,
        0.3206, 0.3775, 0.2026, 0.3670, 0.3361, 0.4850, 0.4850, 0.4171, 0.5827,
        0.4854, 0.5614, 0.4187, 0.4767, 0.4466, 0.3656, 0.7222, 0.4368, 0.4608,
        0.4529, 0.4294, 0.4661, 0.3776, 0.5376, 0.4536, 0.3842, 0.3486, 0.4829,
        0.3795, 0.3955, 0.3234, 0.2694, 0.3737, 0.2707, 0.4046, 0.4120, 0.6217,
        0.3878, 0.4657, 0.6042, 0.3602, 0.6231, 0.4270, 0.3159, 0.3551, 0.5434,
        0.3585, 0.4253, 0.4554, 0.2879, 0.4759, 0.9451, 0.4342, 0.4537, 0.5983,
        0.6831, 0.5624, 0.4637, 0.6042, 0.4168, 0.3382, 0.3609, 0.4099, 0.5434,
        0.3999, 0.4278, 0.4073, 0.3788, 0.3001, 0.4091, 0.2937, 0.3912, 0.3951,
        0.3431, 0.3279, 0.4660, 0.5138, 0.4371, 0.3938, 0.2645, 0.4136, 0.4345,
        0.2301, 0.2242, 0.3508, 0.5825, 0.2080, 0.5545, 0.4509, 0.6035, 0.6543,
        0.6445, 0.5324, 0.4325, 0.5511, 0.6863, 0.4159, 0.5504, 0.6340, 0.3387,
        0.6569, 0.4028, 0.7602, 0.5661, 0.4548, 0.5109, 0.3909, 0.3000, 0.4380,
        0.7863, 0.3935, 0.2806, 0.4459, 0.5288, 0.3783, 0.5291, 0.3236, 0.5390,
        0.3910, 0.4263, 0.2455, 0.6212, 0.2654, 0.4513, 0.3502, 0.4311, 0.2882],
       device='cuda:0')
Mean RMSE across all mean/best sample: mean 2.263, best 0.459
This took 9230.532541275024 seconds for 1000*10 samples

JOB STATISTICS
==============
Job ID: 7150712
Cluster: snellius
User/Group: dfruhbuss/dfruhbuss
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 18
CPU Utilized: 02:33:14
CPU Efficiency: 5.49% of 1-22:31:30 core-walltime
Job Wall-clock time: 02:35:05
Memory Utilized: 2.65 GB
Memory Efficiency: 2.21% of 120.00 GB
