
Modules based on Lua: Version 8.7.30  2023-07-21 17:13 -05:00
    by Robert McLay mclay@tacc.utexas.edu

module [options] sub-command [args ...]

Help sub-commands:
------------------
  help                              prints this message
  help                module [...]  print help message from module(s)

Loading/Unloading sub-commands:
-------------------------------
  load | add          module [...]  load module(s)
  try-load | try-add  module [...]  Add module(s), do not complain if not
                                    found
  del | unload        module [...]  Remove module(s), do not complain if not
                                    found
  swap | sw | switch  m1 m2         unload m1 and load m2
  purge                             unload all modules
  refresh                           reload aliases from current list of
                                    modules.
  update                            reload all currently loaded modules.

Listing / Searching sub-commands:
---------------------------------
  list                              List loaded modules
  list                s1 s2 ...     List loaded modules that match the
                                    pattern
  avail | av                        List available modules
  avail | av          string        List available modules that contain
                                    "string".
  category | cat                    List all categories
  category | cat      s1 s2 ...     List all categories that match the
                                    pattern and display their modules
  overview | ov                     List all available modules by short
                                    names with number of versions
  overview | ov       string        List available modules by short names
                                    with number of versions that contain
                                    "string"
  spider                            List all possible modules
  spider              module        List all possible version of that module
                                    file
  spider              string        List all module that contain the
                                    "string".
  spider              name/version  Detailed information about that version
                                    of the module.
  whatis              module        Print whatis information about module
  keyword | key       string        Search all name and whatis that contain
                                    "string".

Searching with Lmod:
--------------------
  All searching (spider, list, avail, keyword) support regular expressions:
  

  -r spider           '^p'          Finds all the modules that start with
                                    `p' or `P'
  -r spider           mpi           Finds all modules that have "mpi" in
                                    their name.
  -r spider           'mpi$         Finds all modules that end with "mpi" in
                                    their name.

Handling a collection of modules:
--------------------------------
  save | s                          Save the current list of modules to a
                                    user defined "default" collection.
  save | s            name          Save the current list of modules to
                                    "name" collection.
  reset                             The same as "restore system"
  restore | r                       Restore modules from the user's
                                    "default" or system default.
  restore | r         name          Restore modules from "name" collection.
  restore             system        Restore module state to system defaults.
  savelist                          List of saved collections.
  describe | mcc      name          Describe the contents of a module
                                    collection.
  disable             name          Disable (i.e. remove) a collection.

Deprecated commands:
--------------------
  getdefault          [name]        load name collection of modules or
                                    user's "default" if no name given.
                                    ===> Use "restore" instead <====
  setdefault          [name]        Save current list of modules to name if
                                    given, otherwise save as the default
                                    list for you the user.
                                    ===> Use "save" instead. <====

Miscellaneous sub-commands:
---------------------------
  is-loaded           modulefile    return a true status if module is loaded
  is-avail            modulefile    return a true status if module can be
                                    loaded
  show                modulefile    show the commands in the module file.
  use [-a]            path          Prepend or Append path to MODULEPATH.
  unuse               path          remove path from MODULEPATH.
  tablelist                         output list of active modules as a lua
                                    table.

Important Environment Variables:
--------------------------------
  LMOD_COLORIZE                     If defined to be "YES" then Lmod prints
                                    properties and warning in color.

    --------------------------------------------------------------------------

Lmod Web Sites

  Documentation:    https://lmod.readthedocs.org
  GitHub:           https://github.com/TACC/Lmod
  SourceForge:      https://lmod.sf.net
  TACC Homepage:    https://www.tacc.utexas.edu/research-development/tacc-projects/lmod

  To report a bug please read https://lmod.readthedocs.io/en/latest/075_bug_reporting.html
    --------------------------------------------------------------------------


Lmod has detected the following error: These module(s) or extension(s) exist
but cannot be loaded as requested: "Anaconda3/2021.05"
   Try: "module spider Anaconda3/2021.05" to see how to load the module(s).



tensor([47.8005,  5.7663,  1.9524])
10 torch.Size([100])
Time: 195.4878740310669
20 torch.Size([100])
Time: 193.48302245140076
30 torch.Size([100])
Time: 194.09871768951416
40 torch.Size([100])
Time: 193.57191276550293
50 torch.Size([100])
Time: 194.13118767738342
60 torch.Size([100])
Time: 193.52094388008118
70 torch.Size([100])
Time: 194.66803002357483
80 torch.Size([100])
Time: 194.49798679351807
90 torch.Size([100])
Time: 194.39549565315247
100 torch.Size([100])
Time: 191.50152015686035
110 torch.Size([100])
Time: 194.00289463996887
120 torch.Size([100])
Time: 193.67667174339294
130 torch.Size([100])
Time: 195.62985825538635
140 torch.Size([100])
Time: 195.62618112564087
150 torch.Size([100])
Time: 194.23282766342163
160 torch.Size([100])
Time: 195.4152319431305
170 torch.Size([100])
Time: 195.70419669151306
180 torch.Size([100])
Time: 194.30788135528564
190 torch.Size([100])
Time: 195.77103757858276
200 torch.Size([100])
Time: 194.12460613250732
210 torch.Size([100])
Time: 195.2146236896515
220 torch.Size([100])
Time: 194.07201385498047
230 torch.Size([100])
Time: 193.72433924674988
240 torch.Size([100])
Time: 194.07277417182922
250 torch.Size([100])
Time: 193.50095176696777
260 torch.Size([100])
Time: 193.0372712612152
270 torch.Size([100])
Time: 194.95390272140503
280 torch.Size([100])
Time: 194.41001558303833
290 torch.Size([100])
Time: 194.50627541542053
300 torch.Size([100])
Time: 194.07456636428833
310 torch.Size([100])
Time: 193.57633209228516
320 torch.Size([100])
Time: 193.08865094184875
330 torch.Size([100])
Time: 194.36224484443665
340 torch.Size([100])
Time: 194.86507940292358
350 torch.Size([100])
Time: 194.63561916351318
360 torch.Size([100])
Time: 194.77093601226807
370 torch.Size([100])
Time: 195.07920789718628
380 torch.Size([100])
Time: 194.98993039131165
390 torch.Size([100])
Time: 194.63881874084473
400 torch.Size([100])
Time: 195.0718686580658
410 torch.Size([100])
Time: 194.8773262500763
420 torch.Size([100])
Time: 194.08116149902344
430 torch.Size([100])
Time: 195.23306822776794
440 torch.Size([100])
Time: 195.09930205345154
450 torch.Size([100])
Time: 195.97400522232056
tensor([23.6912,  0.7016, 11.0060, 42.7806,  9.2027,  0.9561,  5.8417,  6.9070,
         1.2173,  0.6475,  4.6376,  7.3558, 19.4278,  7.7819,  1.0421,  1.0270,
        24.0478, 22.6479,  1.0201, 23.5679, 21.9836, 19.8738, 10.7410,  0.9533,
        12.1361, 12.8996,  3.4000, 14.8226,  1.5769,  1.1302, 15.0110, 20.6941,
        45.5011, 19.9845, 15.9254,  2.9821,  8.8189, 56.1812,  1.0656,  2.6752,
        14.2571,  8.7144,  0.9461,  1.0454,  0.8106,  0.8343,  6.5526,  9.1470,
         8.1005,  0.7517, 39.9449,  7.8169,  8.5381, 16.0865, 45.9551, 25.8519,
        16.9738, 14.2818, 42.1783,  0.8635,  6.4535, 23.4697, 17.7351,  7.9743,
         0.8737, 20.9798,  8.5346,  1.0030, 36.5388,  0.9299,  8.3766, 21.5068,
         1.0220,  0.7215,  2.8487, 12.8902,  0.9402,  7.6935,  3.6985, 13.4879,
         1.2034,  1.5440,  4.3434,  1.3121, 29.6155, 16.0762,  1.3430, 16.8403,
         1.4243,  6.6692,  9.1957,  3.1650,  0.7898,  0.8058,  9.6945,  0.6382,
        11.8441,  1.1296,  7.1066, 23.9479,  3.3451,  5.6083,  6.6451,  0.9749,
         1.1195, 14.4670,  4.0674,  7.8980,  8.9024,  0.8153,  2.5091,  0.9126,
        10.0576,  5.3536, 22.0208,  6.7333, 14.8662, 25.5193, 19.6463,  1.0461,
         5.4569,  1.2158, 17.0064,  2.0397,  1.2647, 10.9356, 25.4829,  2.5814,
        22.0766, 11.0067, 15.4729,  2.8568,  1.3497,  1.7278,  4.0128,  1.4091,
        10.1873, 16.0490,  4.2862, 14.0490, 30.2911,  0.9506,  6.0959,  4.3866,
         1.1141, 31.8205,  4.6186,  0.7438, 21.0319, 30.7510, 17.3269,  0.9451,
         1.0205,  1.2849, 12.5774, 21.9608,  6.7383, 13.6692,  1.0002, 16.2836,
        52.1908,  6.2854, 29.5179,  0.9499,  2.4255,  3.8748,  1.1109, 18.2462,
         0.9164,  6.1571,  3.6834,  6.0123,  1.1066,  1.2134, 15.2966,  0.8726,
        12.0363,  9.9836,  2.1665, 14.7710, 13.6210,  1.1838, 14.3651, 12.5601,
         1.1663,  1.1657,  5.6354,  1.1425,  1.2785,  3.9781,  1.3740,  1.1733,
        13.2975,  8.2026, 15.1377, 25.6527,  1.0619,  1.2328, 20.8325,  1.1899,
         1.0286, 11.9620,  1.0278,  0.9838,  6.1632,  9.3971,  0.9568,  1.0027,
         0.9504, 19.9417,  1.0386, 12.8798,  0.9376,  6.9726,  8.1615,  0.9398,
         4.6508,  0.7813,  4.5788, 12.4594,  8.2829,  3.5389, 26.4299,  1.1134,
        47.7426,  1.0662, 46.4690,  7.0940, 48.5361,  5.4325,  1.1420,  0.9403,
        36.6922,  1.0187, 21.9823, 11.7876,  5.5186,  1.2290, 11.0704,  1.6504,
         3.6700, 16.8261, 15.0349,  0.9795,  0.8577,  1.0157, 18.3949,  0.8577,
         3.1085, 14.8927, 27.5667,  0.9886,  1.0260, 12.7287,  4.7809,  1.1486,
         1.1922,  1.0144,  0.9773,  0.8507,  7.5112,  0.9488,  1.2144,  6.0489,
        29.5476,  1.0102,  3.8859,  1.0490,  8.9874,  1.0525,  1.3719,  1.2843,
        16.3848, 18.7294,  1.3424, 10.8119,  3.4325,  1.1033,  6.4614,  1.3756,
         1.1803, 28.5196,  1.0664,  4.6893,  1.6127, 10.6434,  3.5305, 10.9342,
        17.7070,  7.1602,  0.9415, 17.1999, 24.8474,  1.0689,  7.1769,  0.8548,
        15.2305, 10.3750,  4.2915,  0.8026,  3.9335, 12.8792, 22.8239,  0.9134,
         1.1055, 23.0281,  6.3959, 21.2374,  7.8807, 16.4252, 13.2055,  0.9813,
        11.7293, 28.2194,  8.6263,  1.0055, 15.5730, 13.3624, 34.3462,  0.9346,
         5.4989,  1.0909, 28.2042,  1.0369,  0.9447, 34.3081, 37.1688,  0.9036,
        28.6051,  6.6943, 18.0715, 49.1916, 42.3351, 18.8525,  1.2063,  1.2394,
         9.9496, 24.1368,  1.0364,  9.4251,  8.3392,  1.2899,  1.4132,  1.3101,
         8.0993,  1.7557, 48.2572,  1.3728, 17.6681, 16.9971,  3.8707, 33.3116,
         0.9768, 13.4013,  4.1692, 28.5598, 50.7797, 12.3195,  9.3431,  1.0755,
         0.9214, 39.1212,  0.9311,  1.0258,  0.8428, 13.7721, 16.3879,  4.3222,
        14.9650,  3.2852, 14.0676,  1.1939, 25.6239,  1.1412,  1.3395, 12.4585,
         3.6245, 19.0529, 20.4809,  1.1688,  0.9191, 10.7847,  1.1497, 26.0013,
        18.4808,  0.7942,  0.7940, 16.3239, 22.9171,  1.0067,  1.0104,  1.0440,
        48.9779,  6.0113,  0.9633,  6.6936,  1.0297, 27.9608,  1.0276,  0.9123,
         1.1386, 23.6763,  4.9604, 14.1437, 18.9901,  3.1697,  1.1799, 10.9610,
         1.0372,  0.8426, 15.9453,  8.1481, 18.6780,  9.3297,  1.1147,  1.6735,
         4.1662,  4.8052, 32.3663,  1.0415,  1.0913,  3.1414,  1.1719, 11.2608,
         1.0895, 20.8241,  3.6140,  1.0558,  2.6463, 47.7406,  0.9904,  1.2960,
        10.3264,  0.9318, 24.5836,  0.9110, 20.3449,  1.4733, 12.1106, 19.8994,
         0.9303,  4.4050,  1.0233,  0.8759,  1.0085,  3.1549,  4.9053,  7.0692,
         1.1001, 25.3530], device='cuda:0')
tensor([0.4028, 0.4186, 0.2922, 0.4846, 0.4334, 0.3748, 0.3358, 0.3029, 0.3582,
        0.2774, 0.4447, 0.3495, 0.3503, 0.4565, 0.4128, 0.3927, 0.4285, 0.6171,
        0.4453, 0.4223, 0.4702, 0.3478, 0.2915, 0.3966, 0.4511, 0.3806, 0.3326,
        0.3695, 0.5895, 0.3117, 0.3308, 0.5709, 0.4067, 0.5737, 0.4751, 0.4353,
        0.5685, 0.4142, 0.4413, 0.5288, 0.2518, 0.2783, 0.3392, 0.3692, 0.3455,
        0.2989, 0.3936, 0.4804, 0.3516, 0.3162, 0.3272, 0.4241, 0.4136, 0.3697,
        0.3456, 0.4188, 0.3502, 0.5021, 0.2604, 0.4349, 0.3751, 0.3635, 0.4116,
        0.4378, 0.3529, 0.3792, 0.3514, 0.3475, 0.3587, 0.4958, 0.3707, 0.3514,
        0.3060, 0.2556, 0.3675, 0.4124, 0.4312, 0.3445, 0.4567, 0.2309, 0.3374,
        0.3865, 0.4036, 0.3897, 0.7284, 0.4750, 0.5900, 0.5224, 0.5288, 0.2459,
        0.3361, 0.4764, 0.3407, 0.4557, 0.3108, 0.3467, 0.4167, 0.6000, 0.4380,
        0.4189, 0.4548, 0.4127, 0.4741, 0.4519, 0.2809, 0.2971, 0.4316, 0.3510,
        0.5327, 0.2719, 0.3183, 0.4319, 0.3300, 0.4440, 0.3754, 0.2865, 0.4874,
        0.2783, 0.3998, 0.2875, 0.5161, 0.2842, 0.5160, 0.2343, 0.7028, 0.5630,
        0.5151, 0.4039, 0.3468, 0.4825, 1.1871, 0.7716, 0.7970, 0.8308, 0.7578,
        0.9117, 0.3617, 0.7148, 0.7143, 0.7996, 0.5051, 0.3661, 0.6585, 0.5534,
        0.3658, 0.6176, 0.4583, 0.2932, 0.4244, 0.4180, 0.2897, 0.3525, 0.4019,
        0.3433, 0.5595, 0.5620, 0.2136, 0.3129, 0.2627, 0.4608, 0.3344, 0.4371,
        0.4975, 0.3088, 0.3999, 0.5228, 0.4076, 0.5209, 0.4223, 0.3312, 0.3723,
        0.3588, 0.4182, 0.3747, 0.4074, 0.4013, 0.4085, 0.2865, 0.3685, 0.4116,
        0.3687, 0.3079, 0.5459, 0.4681, 0.6318, 0.6347, 0.2527, 0.6407, 0.5651,
        0.3359, 0.5976, 0.3388, 0.5723, 0.2895, 0.4526, 0.4924, 0.3649, 0.3870,
        0.4901, 0.4442, 0.3405, 0.4833, 0.3347, 0.4399, 0.5834, 0.2739, 0.3038,
        0.3102, 0.5809, 0.2693, 0.2881, 0.3920, 0.3131, 0.2628, 0.2936, 0.3870,
        0.3559, 0.3338, 0.3768, 0.3671, 0.3004, 0.6066, 0.3975, 0.4435, 0.3604,
        0.6471, 0.3184, 0.6110, 0.9228, 0.3375, 0.4622, 0.6057, 0.3891, 0.3339,
        0.6707, 0.5578, 0.5263, 0.4064, 0.3001, 0.4127, 0.2885, 0.3599, 0.2763,
        0.3842, 0.3294, 0.3077, 0.2888, 0.2670, 0.2605, 0.3479, 0.4845, 0.3370,
        0.3611, 0.4288, 0.5419, 0.4582, 0.3887, 0.2064, 0.3801, 0.3847, 0.3393,
        0.4414, 0.2995, 0.3899, 0.3016, 0.3014, 0.2466, 0.3847, 0.4856, 0.6353,
        0.3428, 0.3461, 0.2898, 0.3261, 0.7832, 0.4761, 0.3249, 0.3185, 0.4231,
        0.5756, 0.2581, 0.2670, 0.3411, 0.3365, 0.6515, 0.1922, 0.4169, 0.8227,
        0.2914, 0.4787, 0.3592, 0.5470, 0.3209, 0.3133, 0.3657, 0.2803, 0.3674,
        0.4087, 0.3742, 0.3170, 0.3293, 0.4549, 0.5236, 0.2887, 0.5352, 0.6582,
        0.3142, 0.6198, 0.3435, 0.3764, 0.4114, 0.2507, 0.3854, 0.6694, 0.5333,
        0.5113, 0.2849, 0.3942, 0.8100, 0.3523, 0.4154, 0.3467, 0.3103, 0.3058,
        0.3366, 0.6212, 0.3530, 0.3538, 0.2620, 0.4582, 0.4635, 0.4272, 0.4346,
        0.2743, 0.3869, 0.3666, 0.3879, 0.2529, 0.3692, 0.3168, 0.4944, 0.4373,
        0.3587, 0.4564, 0.4487, 0.4526, 0.4929, 0.5359, 0.4333, 0.4905, 0.4588,
        0.2903, 0.3135, 0.2960, 0.2170, 0.3993, 0.3490, 0.4718, 0.3573, 0.7035,
        0.4131, 0.4212, 0.3285, 0.3676, 0.3077, 0.3381, 0.2354, 0.3752, 0.5639,
        0.3989, 0.2810, 0.4730, 0.2963, 0.2961, 0.8627, 0.3548, 0.4750, 0.5649,
        0.3338, 0.3575, 0.3115, 0.4006, 0.3760, 0.2249, 0.3557, 0.2936, 0.4284,
        0.3522, 0.4364, 0.3474, 0.3932, 0.2716, 0.3947, 0.3305, 0.3680, 0.2439,
        0.3560, 0.6132, 0.4935, 0.4933, 0.4170, 0.4178, 0.3051, 0.4629, 0.3136,
        0.3093, 0.2637, 0.1714, 0.5466, 0.2515, 0.4538, 0.4260, 0.4667, 0.5898,
        0.4324, 0.3835, 0.3594, 0.4453, 0.5003, 0.3519, 0.5252, 0.5538, 0.3932,
        0.9200, 0.3920, 0.4607, 0.5313, 0.4265, 0.4014, 0.4106, 0.3299, 0.3364,
        1.3408, 0.2976, 0.2051, 0.3514, 0.4061, 0.3513, 0.4979, 0.2375, 0.3684,
        0.4542, 0.4363, 0.3307, 0.5895, 0.3243, 0.4288, 0.4271, 0.3789, 0.5355],
       device='cuda:0')
Mean RMSE across all mean/best sample: mean 9.914, best 0.416
This took 8749.761810064316 seconds for 1000*10 samples

JOB STATISTICS
==============
Job ID: 7091615
Cluster: snellius
User/Group: dfruhbuss/dfruhbuss
State: RUNNING
Nodes: 1
Cores per node: 18
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 1-20:04:48 core-walltime
Job Wall-clock time: 02:26:56
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 120.00 GB (120.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
