
Modules based on Lua: Version 8.7.30  2023-07-21 17:13 -05:00
    by Robert McLay mclay@tacc.utexas.edu

module [options] sub-command [args ...]

Help sub-commands:
------------------
  help                              prints this message
  help                module [...]  print help message from module(s)

Loading/Unloading sub-commands:
-------------------------------
  load | add          module [...]  load module(s)
  try-load | try-add  module [...]  Add module(s), do not complain if not
                                    found
  del | unload        module [...]  Remove module(s), do not complain if not
                                    found
  swap | sw | switch  m1 m2         unload m1 and load m2
  purge                             unload all modules
  refresh                           reload aliases from current list of
                                    modules.
  update                            reload all currently loaded modules.

Listing / Searching sub-commands:
---------------------------------
  list                              List loaded modules
  list                s1 s2 ...     List loaded modules that match the
                                    pattern
  avail | av                        List available modules
  avail | av          string        List available modules that contain
                                    "string".
  category | cat                    List all categories
  category | cat      s1 s2 ...     List all categories that match the
                                    pattern and display their modules
  overview | ov                     List all available modules by short
                                    names with number of versions
  overview | ov       string        List available modules by short names
                                    with number of versions that contain
                                    "string"
  spider                            List all possible modules
  spider              module        List all possible version of that module
                                    file
  spider              string        List all module that contain the
                                    "string".
  spider              name/version  Detailed information about that version
                                    of the module.
  whatis              module        Print whatis information about module
  keyword | key       string        Search all name and whatis that contain
                                    "string".

Searching with Lmod:
--------------------
  All searching (spider, list, avail, keyword) support regular expressions:
  

  -r spider           '^p'          Finds all the modules that start with
                                    `p' or `P'
  -r spider           mpi           Finds all modules that have "mpi" in
                                    their name.
  -r spider           'mpi$         Finds all modules that end with "mpi" in
                                    their name.

Handling a collection of modules:
--------------------------------
  save | s                          Save the current list of modules to a
                                    user defined "default" collection.
  save | s            name          Save the current list of modules to
                                    "name" collection.
  reset                             The same as "restore system"
  restore | r                       Restore modules from the user's
                                    "default" or system default.
  restore | r         name          Restore modules from "name" collection.
  restore             system        Restore module state to system defaults.
  savelist                          List of saved collections.
  describe | mcc      name          Describe the contents of a module
                                    collection.
  disable             name          Disable (i.e. remove) a collection.

Deprecated commands:
--------------------
  getdefault          [name]        load name collection of modules or
                                    user's "default" if no name given.
                                    ===> Use "restore" instead <====
  setdefault          [name]        Save current list of modules to name if
                                    given, otherwise save as the default
                                    list for you the user.
                                    ===> Use "save" instead. <====

Miscellaneous sub-commands:
---------------------------
  is-loaded           modulefile    return a true status if module is loaded
  is-avail            modulefile    return a true status if module can be
                                    loaded
  show                modulefile    show the commands in the module file.
  use [-a]            path          Prepend or Append path to MODULEPATH.
  unuse               path          remove path from MODULEPATH.
  tablelist                         output list of active modules as a lua
                                    table.

Important Environment Variables:
--------------------------------
  LMOD_COLORIZE                     If defined to be "YES" then Lmod prints
                                    properties and warning in color.

    --------------------------------------------------------------------------

Lmod Web Sites

  Documentation:    https://lmod.readthedocs.org
  GitHub:           https://github.com/TACC/Lmod
  SourceForge:      https://lmod.sf.net
  TACC Homepage:    https://www.tacc.utexas.edu/research-development/tacc-projects/lmod

  To report a bug please read https://lmod.readthedocs.io/en/latest/075_bug_reporting.html
    --------------------------------------------------------------------------


Lmod has detected the following error: These module(s) or extension(s) exist
but cannot be loaded as requested: "Anaconda3/2021.05"
   Try: "module spider Anaconda3/2021.05" to see how to load the module(s).



tensor([47.8005,  5.7663,  1.9524])
10 torch.Size([100])
Time: 293.44293117523193
20 torch.Size([100])
Time: 289.05438208580017
30 torch.Size([100])
Time: 291.6012201309204
40 torch.Size([100])
Time: 288.49251890182495
50 torch.Size([100])
Time: 290.04569840431213
60 torch.Size([100])
Time: 288.96101450920105
70 torch.Size([100])
Time: 291.3160192966461
80 torch.Size([100])
Time: 292.28768014907837
90 torch.Size([100])
Time: 289.5664792060852
100 torch.Size([100])
Time: 292.35105538368225
110 torch.Size([100])
Time: 292.46904826164246
120 torch.Size([100])
Time: 289.0756731033325
130 torch.Size([100])
Time: 291.83694219589233
140 torch.Size([100])
Time: 291.23883986473083
150 torch.Size([100])
Time: 291.3605136871338
160 torch.Size([100])
Time: 290.2804355621338
170 torch.Size([100])
Time: 291.28373527526855
180 torch.Size([100])
Time: 293.66692090034485
190 torch.Size([100])
Time: 291.921995639801
200 torch.Size([100])
Time: 292.1684377193451
210 torch.Size([100])
Time: 292.34863233566284
220 torch.Size([100])
Time: 292.95009565353394
230 torch.Size([100])
Time: 288.36467957496643
240 torch.Size([100])
Time: 289.67853307724
250 torch.Size([100])
Time: 290.49354553222656
260 torch.Size([100])
Time: 291.4484004974365
270 torch.Size([100])
Time: 290.039026260376
280 torch.Size([100])
Time: 290.72030663490295
290 torch.Size([100])
Time: 291.662761926651
300 torch.Size([100])
Time: 291.8860900402069
310 torch.Size([100])
Time: 289.01138067245483
320 torch.Size([100])
Time: 287.9134798049927
330 torch.Size([100])
Time: 288.61924052238464
340 torch.Size([100])
Time: 291.29452776908875
350 torch.Size([100])
Time: 291.1201298236847
360 torch.Size([100])
Time: 291.42007970809937
370 torch.Size([100])
Time: 292.20142698287964
380 torch.Size([100])
Time: 292.6468813419342
390 torch.Size([100])
Time: 291.0424609184265
400 torch.Size([100])
Time: 291.1076877117157
410 torch.Size([100])
Time: 291.0929636955261
420 torch.Size([100])
Time: 291.2303011417389
430 torch.Size([100])
Time: 291.3154695034027
440 torch.Size([100])
Time: 291.10746812820435
450 torch.Size([100])
Time: 291.90380215644836
tensor([11.2301,  0.5894,  6.1083, 26.3598,  9.2183,  2.6728,  0.6291,  7.2734,
         0.7009,  0.5337,  6.5415,  2.1105, 32.3677,  2.6266,  1.0091,  0.9308,
        23.2436, 17.2080,  2.7032, 22.6022, 20.7897, 19.8053,  8.8504, 12.2181,
         5.4004,  2.2437,  1.1551,  6.4444,  3.3430,  1.1866, 22.4111, 21.0768,
        42.5279, 10.7589, 25.1969, 11.2110,  8.8035, 42.3203,  6.2629,  7.2899,
        10.4086,  3.1734,  0.6190,  0.7688,  6.5588,  5.8259, 24.9417,  5.4431,
         1.5735, 11.8208, 27.6836, 11.0672, 14.2528, 12.8803, 38.7073, 11.8786,
        26.2215,  8.2634, 36.9309,  0.8211,  0.6970, 15.6106, 11.4641,  0.6536,
         0.7420, 20.3472,  0.8062,  0.7542, 25.3274,  0.8879,  0.7890, 12.8249,
         4.2835,  0.7716,  0.8460, 10.2794,  5.4546,  0.7471,  4.7317,  7.8022,
         1.1782,  3.9354,  1.4005,  1.2973, 37.9440, 19.7323,  1.2975, 11.8951,
         1.3234,  1.3671,  0.6885,  0.7495,  4.6291,  0.7744, 10.4899,  4.2236,
         6.9202,  3.4698, 19.3812, 13.5990,  4.2886,  0.9718, 15.3240,  1.0565,
         8.4744,  3.9802, 10.7316, 13.5702,  1.0711,  7.8452, 13.3927,  3.6231,
        18.7585,  0.9281, 26.6672,  0.9098, 30.0856, 32.9391, 14.8814,  0.8928,
         0.9830,  1.1587, 16.1807,  0.8826,  1.0601,  8.1661, 20.6990,  0.7216,
        15.2517,  9.0778,  6.2023,  1.3574,  2.3747,  1.0821,  5.4827,  1.3440,
        14.8759, 11.2390,  1.1527,  5.9635, 21.4860,  8.8657,  0.9900,  7.2999,
        11.1749, 29.3597,  6.5040,  0.5936, 14.9605, 32.1369, 21.1602, 16.1462,
        10.6895,  1.2310, 15.9864, 41.1267, 12.8663, 13.8895, 11.1188, 15.2424,
        43.0062,  6.2676, 35.5434, 16.0543, 11.1868,  0.8353,  0.9035, 12.0673,
         0.9463,  0.7961, 15.3696,  9.3107,  4.2173,  3.3822, 14.5578,  0.8511,
        12.8252,  9.1380,  7.8621, 15.7364, 11.7232,  9.1734, 17.1729, 24.4620,
         1.0340,  0.9397,  2.7709,  0.9190,  1.0369, 14.9709,  1.3003,  1.2148,
         5.4764, 12.1234, 13.5503, 18.3954,  2.1120,  1.1911, 19.2835,  1.1662,
         1.0237, 18.5736,  0.9494,  3.0023, 12.5908, 16.1813,  0.8884,  0.8836,
         0.8543, 10.7657,  0.9320,  0.9969,  6.4924,  0.8544, 12.1464,  0.7462,
         3.9898,  0.9051,  0.8282,  0.7919,  1.0136, 10.6618, 12.4984,  1.0268,
        34.7984,  9.4599, 37.7677,  6.0277, 51.1994,  0.9373,  0.7904,  0.8335,
        18.6824,  1.1485, 24.7662, 11.3801,  1.1638, 15.0956, 12.1161,  6.9284,
        12.6139, 20.2920,  9.5152,  0.8535,  0.8982,  5.5428, 11.7009,  0.8524,
        18.0302,  1.9638, 19.8784, 11.0170,  0.8772,  5.5808,  4.2102,  1.2220,
         1.0124,  0.9291,  0.8644,  0.8218,  5.9803,  1.0348,  1.0550,  5.1403,
        20.5674, 15.6098, 18.8168,  1.0824, 12.4181,  3.5365,  1.4980,  5.3231,
         1.4429, 30.5733,  1.5534, 14.0555,  5.0828,  1.3055, 16.0483,  1.5102,
         1.1734, 22.8119,  1.0881,  5.8933,  1.5633,  1.4323,  9.7437, 11.8845,
        18.3849,  9.4488,  8.6077, 13.1286, 19.9181,  0.9657,  8.3382,  3.6833,
         9.2596, 13.2129,  5.0802,  0.9578, 11.8722, 11.4375, 11.4493, 10.6612,
         0.7788, 25.4638, 10.8576, 22.9607, 16.2735,  2.3326, 24.9301,  0.9150,
        34.3574, 25.0595,  1.3250,  0.8036, 27.7380,  7.0480, 39.5873,  0.8241,
        12.2415,  0.9124, 12.4761, 14.2640,  0.9104, 28.2196, 43.9144,  0.8459,
        22.7644,  0.9310, 14.5092, 41.8145, 34.1529, 10.8936,  1.2121,  1.1285,
         7.8973, 13.9523,  8.4091,  3.4853,  1.3981,  1.2391,  4.2389,  1.1753,
         8.4135, 14.4464, 36.6963,  1.2614, 23.1717, 19.1037,  0.9690, 22.7540,
         2.6546,  7.1991,  0.9210, 24.0486, 31.9855,  7.9325, 12.5018,  0.8748,
         0.7823, 34.5824,  0.8606,  0.8034,  0.7520,  8.7297, 31.0899,  6.4271,
        19.8330,  0.7975, 17.1417,  7.1428, 34.2568,  7.1938,  1.3162,  1.1917,
         3.1787, 14.7089,  7.0716,  1.2272,  0.8152,  0.8920,  1.0869, 18.2524,
        28.4789,  0.8982,  3.0214, 18.4263,  0.6748,  7.1875,  9.7529,  0.9210,
        36.3350,  0.9652,  0.8941, 13.2240,  0.8468, 16.8433,  0.9136,  0.9981,
         3.0398, 40.0895,  0.8548,  8.6868, 29.3452,  3.8909,  4.9538,  9.6757,
         2.0895,  4.6289, 10.1630, 15.0570, 11.5590,  6.1590,  0.9446,  0.7250,
         0.9664,  9.2537, 19.3556,  0.8810,  1.0009,  1.2093,  6.4297, 20.2807,
         1.0151,  3.4914, 10.5363,  0.9673,  1.0446, 42.9393,  1.0109,  1.1136,
         1.5559,  0.7520, 11.8732, 12.3344, 19.4652,  4.8595,  8.1278, 16.2783,
         2.8372,  4.4497,  0.6694,  0.6556,  6.5433,  5.5095, 12.8816,  0.7871,
         0.8337, 20.2626], device='cuda:0')
tensor([0.3162, 0.2472, 0.2305, 0.4388, 0.3810, 0.3487, 0.2533, 0.2926, 0.3349,
        0.2683, 0.4022, 0.3762, 0.4978, 0.3524, 0.4927, 0.2361, 0.2636, 0.3379,
        0.2820, 0.2528, 0.2451, 0.2869, 0.1486, 0.3693, 0.2885, 0.1837, 0.2355,
        0.2231, 0.2666, 0.3086, 0.3115, 0.6795, 0.3144, 0.4211, 0.4825, 0.3975,
        0.4933, 0.4494, 0.4440, 0.4234, 0.1919, 0.2056, 0.2309, 0.2182, 0.2019,
        0.2125, 0.3031, 0.3388, 0.2447, 0.2987, 0.2006, 0.3038, 0.4066, 0.3260,
        0.3352, 0.3865, 0.2051, 0.2790, 0.3409, 0.3402, 0.2979, 0.3416, 0.1507,
        0.2723, 0.2183, 0.2979, 0.3958, 0.2714, 0.2939, 0.2434, 0.3460, 0.2900,
        0.3392, 0.2058, 0.2134, 0.2949, 0.3527, 0.2738, 0.3150, 0.1848, 0.3945,
        0.2368, 0.5833, 0.3492, 0.5045, 0.4144, 0.4046, 0.4631, 0.3846, 0.3227,
        0.3187, 0.3385, 0.1884, 0.2929, 0.2228, 0.2581, 0.3057, 0.2498, 0.2299,
        0.3318, 0.4459, 0.3799, 0.4080, 0.4409, 0.5014, 0.2859, 0.3300, 0.4305,
        0.5007, 0.2983, 0.2556, 0.2975, 0.1778, 0.2510, 0.1709, 0.1670, 0.2518,
        0.2058, 0.3529, 0.1742, 0.4435, 0.3137, 0.4022, 0.2680, 0.3925, 0.3990,
        0.4665, 0.3012, 0.1968, 0.3673, 0.7214, 0.6325, 0.6399, 0.4252, 0.4565,
        0.7266, 0.3585, 0.6307, 0.4753, 0.6923, 0.3745, 0.2811, 0.5150, 0.2906,
        0.2581, 0.3352, 0.4260, 0.2109, 0.3912, 0.4301, 0.2433, 0.2870, 0.4135,
        0.2719, 0.3714, 0.4970, 0.2699, 0.2327, 0.2965, 0.2471, 0.3762, 0.4304,
        0.3704, 0.3514, 0.3996, 0.4594, 0.3614, 0.3759, 0.3505, 0.3670, 0.3735,
        0.2316, 0.3897, 0.3656, 0.2638, 0.2678, 0.3052, 0.2177, 0.2502, 0.2358,
        0.2733, 0.2775, 0.2556, 0.3472, 0.4148, 0.3411, 0.2687, 0.3273, 0.4407,
        0.2656, 0.4033, 0.4694, 0.3545, 0.4908, 0.3607, 0.3513, 0.2960, 0.3243,
        0.4398, 0.4252, 0.1930, 0.5454, 0.3134, 0.3035, 0.3437, 0.3013, 0.2113,
        0.2615, 0.2074, 0.2815, 0.2165, 0.3257, 0.5508, 0.2669, 0.3035, 0.3976,
        0.2852, 0.2880, 0.2752, 0.2802, 0.2110, 0.3443, 0.2539, 0.3250, 0.6323,
        0.5347, 0.2217, 0.2327, 0.2792, 0.2085, 0.2708, 0.4299, 0.3601, 0.2401,
        0.3169, 0.3699, 0.3693, 0.3452, 0.2851, 0.2647, 0.2384, 0.2481, 0.2715,
        0.2238, 0.3058, 0.3429, 0.2993, 0.3364, 0.3433, 0.2611, 0.3130, 0.4047,
        0.2534, 0.3836, 0.3235, 0.3049, 0.2869, 0.3107, 0.1911, 0.3401, 0.3226,
        0.2793, 0.2773, 0.2662, 0.2860, 0.2685, 0.2573, 0.3403, 0.3204, 0.2476,
        0.4642, 0.4293, 0.3836, 0.4027, 1.2176, 0.4397, 0.3400, 0.3338, 0.4539,
        0.5584, 0.2228, 0.3276, 0.2926, 0.2626, 0.2653, 0.2785, 0.4078, 0.2739,
        0.3650, 0.3871, 0.3803, 0.4112, 0.2528, 0.3813, 0.4156, 0.2825, 0.3395,
        0.4074, 0.3650, 0.3468, 0.2348, 0.3704, 0.3470, 0.2306, 0.2354, 0.2690,
        0.2858, 0.2774, 0.2876, 0.2468, 0.2131, 0.1925, 0.3278, 0.3615, 0.3273,
        0.5235, 0.2560, 0.3496, 0.5859, 0.3425, 0.2266, 0.2357, 0.2458, 0.3137,
        0.2853, 0.2378, 0.2870, 0.2169, 0.2212, 0.2583, 0.2603, 0.2236, 0.4209,
        0.2435, 0.1717, 0.2111, 0.2478, 0.2311, 0.2387, 0.1982, 0.4581, 0.4299,
        0.2681, 0.3241, 0.3170, 0.3803, 0.3105, 0.4066, 0.4395, 0.3695, 0.3337,
        0.1991, 0.1798, 0.2134, 0.1950, 0.2577, 0.2153, 0.2561, 0.1462, 0.2381,
        0.3561, 0.3409, 0.3311, 0.2326, 0.2812, 0.3065, 0.3856, 0.3733, 0.2925,
        0.3119, 0.3207, 0.3142, 0.2277, 0.2722, 0.7627, 0.3926, 0.3784, 0.5056,
        0.3471, 0.2888, 0.2661, 0.4326, 0.2836, 0.3081, 0.4332, 0.3505, 0.3900,
        0.3790, 0.3411, 0.4058, 0.2519, 0.4928, 0.4923, 0.3510, 0.4699, 0.2631,
        0.1949, 0.3713, 0.4493, 0.5252, 0.3272, 0.3027, 0.2412, 0.3453, 0.3437,
        0.2794, 0.2677, 0.2303, 0.4335, 0.2960, 0.4229, 0.3598, 0.3707, 0.4869,
        0.4570, 0.4398, 0.3575, 0.4481, 0.4618, 0.3857, 0.3395, 0.3829, 0.2889,
        0.3527, 0.2533, 0.4217, 0.2374, 0.3466, 0.3002, 0.3464, 0.3478, 0.3326,
        0.3996, 0.2727, 0.2875, 0.2581, 0.3686, 0.5371, 0.2486, 0.2394, 0.3812,
        0.3273, 0.3937, 0.2719, 0.4954, 0.2667, 0.4085, 0.4567, 0.3910, 0.3864],
       device='cuda:0')
Mean RMSE across all mean/best sample: mean 9.684, best 0.334
This took 13095.044429302216 seconds for 1000*10 samples

JOB STATISTICS
==============
Job ID: 7084148
Cluster: snellius
User/Group: dfruhbuss/dfruhbuss
State: RUNNING
Nodes: 1
Cores per node: 18
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 2-17:48:18 core-walltime
Job Wall-clock time: 03:39:21
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 120.00 GB (120.00 GB/node)
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
